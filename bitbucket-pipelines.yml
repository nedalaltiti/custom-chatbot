options:
  docker: true
  size: 2x

pipelines:
  branches:
    master:
      - step:
          name: Build and Deploy to Production
          image: tstrohmeier/awscli:3.8.3
          services:
            - docker
          script:
            # ✅ Credential validation and setup
            - echo "=== AWS CREDENTIAL VALIDATION ==="
            - export AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID
            - export AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY
            - export AWS_DEFAULT_REGION=us-west-1
            - export AWS_REGION=us-west-1
            
            # ✅ Test AWS authentication before proceeding
            - echo "Testing AWS authentication..."
            - aws sts get-caller-identity
            - echo "✅ AWS authentication successful"
            
            # ✅ Test AWS Secrets Manager access
            - echo "Testing AWS Secrets Manager access..."
            - aws secretsmanager get-secret-value --secret-id chatbot-clarity-db-dev-postgres --region us-west-1 --query 'SecretString' --output text > /dev/null
            - echo "✅ AWS Secrets Manager access confirmed"
            
            # Build and push Docker image
            - echo "=== DOCKER BUILD & PUSH ==="
            - aws ecr get-login-password --region us-west-1 | docker login --username AWS --password-stdin 794038237159.dkr.ecr.us-west-1.amazonaws.com
            - docker build --no-cache -t $IMAGE_FULL_PROD .
            - docker push $IMAGE_FULL_PROD
            - echo "✅ Docker image pushed successfully"
            
            # Install kubectl and helm
            - echo "=== INSTALLING DEPLOYMENT TOOLS ==="
            - curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
            - chmod +x kubectl && mv kubectl /usr/local/bin/
            - curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash
            - echo "✅ kubectl and helm installed"
            
            # Configure kubectl for EKS
            - echo "=== CONFIGURING KUBERNETES ACCESS ==="
            - aws eks update-kubeconfig --region us-west-1 --name your-eks-cluster-name
            - kubectl get nodes
            - echo "✅ Kubernetes access configured"
            
            # ✅ Deploy to Production with safe credential injection
            - echo "=== DEPLOYING TO PRODUCTION ==="
            
            # Deploy Jordan (JO) instance
            - echo "Deploying Jordan instance..."
            - helm upgrade --install custom-chatbot-jo . \
                --namespace custom-chatbot-jo-prod \
                --create-namespace \
                --values values-jo.yaml \
                --set image.tag=latest \
                --set-string aws.accessKeyId="$AWS_ACCESS_KEY_ID" \
                --set-string aws.secretAccessKey="$AWS_SECRET_ACCESS_KEY" \
                --wait --timeout=10m
            - echo "✅ Jordan instance deployed"
            
            # Deploy US instance
            - echo "Deploying US instance..."
            - helm upgrade --install custom-chatbot-us . \
                --namespace custom-chatbot-us-prod \
                --create-namespace \
                --values values-us.yaml \
                --set image.tag=latest \
                --set-string aws.accessKeyId="$AWS_ACCESS_KEY_ID" \
                --set-string aws.secretAccessKey="$AWS_SECRET_ACCESS_KEY" \
                --wait --timeout=10m
            - echo "✅ US instance deployed"
            
            # ✅ Post-deployment validation
            - echo "=== POST-DEPLOYMENT VALIDATION ==="
            - kubectl get pods -n custom-chatbot-jo-prod
            - kubectl get pods -n custom-chatbot-us-prod
            - echo "Waiting for pods to be ready..."
            - kubectl wait --for=condition=ready pod -l app.kubernetes.io/name=custom-chatbot -n custom-chatbot-jo-prod --timeout=300s
            - kubectl wait --for=condition=ready pod -l app.kubernetes.io/name=custom-chatbot -n custom-chatbot-us-prod --timeout=300s
            - echo "✅ All pods are ready"
            
    stg:
      - step:
          name: Build and Deploy to Staging
          image: tstrohmeier/awscli:3.8.3
          services:
            - docker
          script:
            # ✅ Credential validation and setup
            - echo "=== AWS CREDENTIAL VALIDATION ==="
            - export AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID
            - export AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY
            - export AWS_DEFAULT_REGION=us-west-1
            - export AWS_REGION=us-west-1
            
            # ✅ Test AWS authentication
            - echo "Testing AWS authentication..."
            - aws sts get-caller-identity
            - echo "✅ AWS authentication successful"
            
            # Build and push Docker image
            - echo "=== DOCKER BUILD & PUSH ==="
            - aws ecr get-login-password --region us-west-1 | docker login --username AWS --password-stdin 794038237159.dkr.ecr.us-west-1.amazonaws.com
            - docker build --no-cache -t $IMAGE_FULL_STG .
            - docker push $IMAGE_FULL_STG
            - echo "✅ Docker image pushed successfully"
            
            # Install kubectl and helm
            - echo "=== INSTALLING DEPLOYMENT TOOLS ==="
            - curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
            - chmod +x kubectl && mv kubectl /usr/local/bin/
            - curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash
            
            # Configure kubectl for EKS
            - echo "=== CONFIGURING KUBERNETES ACCESS ==="
            - aws eks update-kubeconfig --region us-west-1 --name your-eks-cluster-name
            - kubectl get nodes
            
            # ✅ Deploy to Staging
            - echo "=== DEPLOYING TO STAGING ==="
            
            # Deploy Jordan (JO) instance
            - helm upgrade --install custom-chatbot-jo . \
                --namespace custom-chatbot-jo-staging \
                --create-namespace \
                --values values-jo.yaml \
                --set image.tag=staging \
                --set-string aws.accessKeyId="$AWS_ACCESS_KEY_ID" \
                --set-string aws.secretAccessKey="$AWS_SECRET_ACCESS_KEY" \
                --wait --timeout=10m
            
            # Deploy US instance
            - helm upgrade --install custom-chatbot-us . \
                --namespace custom-chatbot-us-staging \
                --create-namespace \
                --values values-us.yaml \
                --set image.tag=staging \
                --set-string aws.accessKeyId="$AWS_ACCESS_KEY_ID" \
                --set-string aws.secretAccessKey="$AWS_SECRET_ACCESS_KEY" \
                --wait --timeout=10m
            
            - echo "✅ Staging deployment completed"

    dev:
      - step:
          name: Build and Deploy to Development
          image: tstrohmeier/awscli:3.8.3
          services:
            - docker
          script:
            # ✅ Credential validation and setup
            - echo "=== AWS CREDENTIAL VALIDATION ==="
            - export AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID
            - export AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY
            - export AWS_DEFAULT_REGION=us-west-1
            - export AWS_REGION=us-west-1
            
            # ✅ Test AWS authentication
            - echo "Testing AWS authentication..."
            - aws sts get-caller-identity
            - echo "✅ AWS authentication successful"
            
            # Build and push Docker image
            - echo "=== DOCKER BUILD & PUSH ==="
            - aws ecr get-login-password --region us-west-1 | docker login --username AWS --password-stdin 794038237159.dkr.ecr.us-west-1.amazonaws.com
            - docker build --no-cache -t $IMAGE_FULL_DEV .
            - docker push $IMAGE_FULL_DEV
            - echo "✅ Docker image pushed successfully"
            
            # Install kubectl and helm
            - echo "=== INSTALLING DEPLOYMENT TOOLS ==="
            - curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
            - chmod +x kubectl && mv kubectl /usr/local/bin/
            - curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash
            
            # Configure kubectl for EKS
            - echo "=== CONFIGURING KUBERNETES ACCESS ==="
            - aws eks update-kubeconfig --region us-west-1 --name your-eks-cluster-name
            - kubectl get nodes
            
            # ✅ Deploy to Development (the current working deployments)
            - echo "=== DEPLOYING TO DEVELOPMENT ==="
            
            # Deploy Jordan (JO) instance
            - helm upgrade --install custom-chatbot-jo . \
                --namespace custom-chatbot-jo-dev \
                --create-namespace \
                --values values-jo.yaml \
                --set image.tag=latest \
                --set-string aws.accessKeyId="$AWS_ACCESS_KEY_ID" \
                --set-string aws.secretAccessKey="$AWS_SECRET_ACCESS_KEY" \
                --wait --timeout=10m
            
            # Deploy US instance  
            - helm upgrade --install custom-chatbot-us . \
                --namespace custom-chatbot-us-dev \
                --create-namespace \
                --values values-us.yaml \
                --set image.tag=latest \
                --set-string aws.accessKeyId="$AWS_ACCESS_KEY_ID" \
                --set-string aws.secretAccessKey="$AWS_SECRET_ACCESS_KEY" \
                --wait --timeout=10m
            
            - echo "✅ Development deployment completed"
            
            # ✅ Health check
            - echo "=== HEALTH CHECK ==="
            - sleep 30  # Give pods time to start
            - kubectl get pods -n custom-chatbot-jo-dev
            - kubectl get pods -n custom-chatbot-us-dev
            - echo "✅ Deployment verification completed"