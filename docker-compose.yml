networks:
  hrbot-network:
    driver: bridge
    name: hrbot-network

volumes:
  hrbot-data:
    name: hrbot-data
  postgres-data:
    name: hrbot-postgres-data
  hrbot-logs-jo:
    name: hrbot-logs-jo
  hrbot-logs-us:
    name: hrbot-logs-us

services:
  
  # Shared Infrastructure - PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    container_name: hrbot-postgres
    restart: unless-stopped
    
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-hrbot}
      POSTGRES_USER: ${POSTGRES_USER:-hrbot}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-hrbot123}
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256"
    
    ports:
      - "5432:5432"
    
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-hrbot} -d ${POSTGRES_DB:-hrbot}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    
    networks:
      - hrbot-network

  # Jordan (jo) Instance
  hrbot-jo:
    build:
      context: .
      dockerfile: Dockerfile
      target: runtime
      args:
        APP_INSTANCE: jo  # Build arg for instance specification
    
    image: hrbot:jo-latest
    container_name: hrbot-jo
    restart: unless-stopped
    
    ports:
      - "3978:3978"  # Keep as 3978 for JO
    
    # Load environment from .env.jo file
    env_file:
      - .env.jo
    
    # Override specific settings for Docker environment
    environment:
      # Docker-specific overrides
      - APP_INSTANCE=jo   # Runtime env override
      - HOSTNAME=hrbot-jo
      - PYTHONPATH=/app/src
      
      # Force local database for Docker (override .env.jo if needed)
      - USE_AWS_SECRETS=false
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=hrbot
      - DB_USER=hrbot
      - DB_PASSWORD=hrbot123
      - DB_SSLMODE=disable
      
      # Ensure correct port for JO instance
      - PORT=3978
    
    volumes:
      - hrbot-data:/app/data
      - hrbot-logs-jo:/app/logs
    
    depends_on:
      postgres:
        condition: service_healthy
    
    healthcheck:
      test: [\"CMD\", \"python\", \"/app/scripts/healthcheck.py\"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    
    networks:
      - hrbot-network
    
    profiles:
      - jo
      - multi-app
      - development
      - default

  # US Instance
  hrbot-us:
    build:
      context: .
      dockerfile: Dockerfile
      target: runtime
      args:
        APP_INSTANCE: us  # Build arg for instance specification
    
    image: hrbot:us-latest
    container_name: hrbot-us
    restart: unless-stopped
    
    ports:
      - "3979:3979"  # Different port for US
    
    # Load environment from .env.us file
    env_file:
      - .env.us
    
    # Override specific settings for Docker environment
    environment:
      # Docker-specific overrides
      - APP_INSTANCE=us   # Runtime env override
      - HOSTNAME=hrbot-us
      - PYTHONPATH=/app/src
      
      # Force local database for Docker (override .env.us if needed)
      - USE_AWS_SECRETS=false
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=hrbot
      - DB_USER=hrbot
      - DB_PASSWORD=hrbot123
      - DB_SSLMODE=disable
      
      # Ensure correct port for US instance
      - PORT=3979
    
    volumes:
      - hrbot-data:/app/data
      - hrbot-logs-us:/app/logs
    
    depends_on:
      postgres:
        condition: service_healthy
    
    healthcheck:
      test: [\"CMD\", \"python\", \"/app/scripts/healthcheck.py\"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    
    networks:
      - hrbot-network
    
    profiles:
      - us
      - multi-app
      - development

  # Nginx Reverse Proxy (optional)
  nginx:
    image: nginx:alpine
    container_name: hrbot-nginx
    restart: unless-stopped
    
    ports:
      - "80:80"
      - "443:443"
    
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    
    depends_on:
      - hrbot-jo
      - hrbot-us
    
    networks:
      - hrbot-network
    
    profiles:
      - multi-app
      - production